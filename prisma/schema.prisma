generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      UserType  @default(cliente)
  Client    Client?

  @@map("users")
}

model Client {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  fullName  String
  contact   String   @db.VarChar(11)
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Addresses Address[]
  Orders    Order[]  
  CartItems CartItem[]

  @@map("clients")
}

model Address {
  id         Int      @id @default(autoincrement())
  clientId   Int
  cep        String   @db.VarChar(8)
  logradouro String
  numero     String
  complemento String?
  bairro     String
  cidade     String
  estado     String   @db.VarChar(2)
  status     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Client     Client   @relation(fields: [clientId], references: [id])

  @@map("address")
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  description String
  price      Float
  stock      Int
  status     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Items      Item[]
  Images     Image[]
  CartItems  CartItem[]

  @@map("products")
}

model Order {
  id         Int      @id @default(autoincrement())
  clientId   Int
  status     OrderStatus @default(RECEBIDO)
  total      Decimal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Client     Client   @relation(fields: [clientId], references: [id])
  Items      Item[]

  @@map("orders")
}

model Item {
  id         Int      @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  price      Decimal
  subtotal   Decimal
  Order      Order    @relation(fields: [orderId], references: [id])
  Product    Product  @relation(fields: [productId], references: [id])

  @@unique([orderId, productId], name: "unique_item_per_order")
  @@map("items")
}

model Report {
  id         Int      @id @default(autoincrement())
  period     DateTime
  totalSales Decimal
  totalOrders Int
  path       String
  createdAt  DateTime @default(now())

  @@map("reports")
}

model Image {
  id         Int      @id @default(autoincrement())
  productId  Int
  path       String
  key        String
  Product    Product  @relation(fields: [productId], references: [id])

  @@map("images")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  clientId   Int    
  productId  Int
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Client     Client   @relation(fields: [clientId], references: [id])
  Product    Product  @relation(fields: [productId], references: [id])

  @@unique([clientId, productId], name: "unique_cart_item")
  @@map("cart_items")
}

enum UserType {
  admin
  cliente
}

enum OrderStatus {
  RECEBIDO        @map("Recebido")
  EM_PREPARACAO   @map("Em preparação")
  DESPACHADO      @map("Despachado")
  ENTREGUE        @map("Entregue")
}

